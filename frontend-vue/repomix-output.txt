This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src/**/*
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  router/
    index.js
  store/
    index.js
  views/
    Home.vue
    ProjectDetail.vue
    Projects.vue
    Translation.vue
  App.vue
  main.js

================================================================
Files
================================================================

================
File: src/router/index.js
================
import Vue from 'vue'
import VueRouter from 'vue-router'
import Home from '../views/Home.vue'

Vue.use(VueRouter)

const routes = [
  {
    path: '/',
    name: 'Home',
    component: Home
  },
  {
    path: '/projects',
    name: 'Projects',
    component: () => import('../views/Projects.vue')
  },
  {
    path: '/projects/:id',
    name: 'ProjectDetail',
    component: () => import('../views/ProjectDetail.vue'),
    props: true
  },
  {
    path: '/translation/:projectId/:fileId',
    name: 'Translation',
    component: () => import('../views/Translation.vue'),
    props: true
  }
]

const router = new VueRouter({
  mode: 'history',
  base: process.env.BASE_URL,
  routes
})

export default router

================
File: src/store/index.js
================
import Vue from 'vue'
import Vuex from 'vuex'
import axios from 'axios'

Vue.use(Vuex)

export default new Vuex.Store({
  state: {
    projects: [],
    currentProject: null,
    currentFile: null,
    originalSegments: [],
    translatedSegments: [],
    loading: false
  },
  mutations: {
    SET_PROJECTS(state, projects) {
      state.projects = projects
    },
    SET_CURRENT_PROJECT(state, project) {
      state.currentProject = project
    },
    SET_CURRENT_FILE(state, file) {
      state.currentFile = file;
      if (file) {
        state.originalSegments = file.originalSegments;
        state.translatedSegments = file.translatedSegments;
      } else {
        state.originalSegments = [];
        state.translatedSegments = [];
      }
    },
    UPDATE_TRANSLATED_SEGMENT(state, { index, text }) {
      Vue.set(state.translatedSegments, index, text);
    },
    SET_LOADING(state, loading) {
      state.loading = loading;
    }
  },
  actions: {
    // 项目相关操作
    async fetchProjects({ commit }) {
      commit('SET_LOADING', true);
      try {
        const response = await axios.get('/api/projects');
        commit('SET_PROJECTS', response.data);
        return response.data;
      } finally {
        commit('SET_LOADING', false);
      }
    },
    async createProject({ commit, dispatch }, { name, description }) {
      commit('SET_LOADING', true);
      try {
        const response = await axios.post('/api/projects', { name, description });
        await dispatch('fetchProjects');
        return response.data;
      } finally {
        commit('SET_LOADING', false);
      }
    },
    async fetchProject({ commit }, projectId) {
      commit('SET_LOADING', true);
      try {
        const response = await axios.get(`/api/projects/${projectId}`);
        commit('SET_CURRENT_PROJECT', response.data);
        return response.data;
      } finally {
        commit('SET_LOADING', false);
      }
    },
    async deleteProject({ commit, dispatch }, projectId) {
      commit('SET_LOADING', true);
      try {
        await axios.delete(`/api/projects/${projectId}`);
        commit('SET_CURRENT_PROJECT', null);
        await dispatch('fetchProjects');
      } finally {
        commit('SET_LOADING', false);
      }
    },

    // 文件相关操作
    async uploadFile({ commit, dispatch }, { projectId, formData }) {
      commit('SET_LOADING', true);
      try {
        const response = await axios.post(`/api/projects/${projectId}/files`, formData);
        await dispatch('fetchProject', projectId);
        return response.data;
      } finally {
        commit('SET_LOADING', false);
      }
    },
    async fetchFile({ commit }, { projectId, fileId }) {
      commit('SET_LOADING', true);
      try {
        const response = await axios.get(`/api/projects/${projectId}/files/${fileId}`);
        commit('SET_CURRENT_FILE', response.data);
        return response.data;
      } finally {
        commit('SET_LOADING', false);
      }
    },
    async deleteFile({ commit, dispatch, state }, { projectId, fileId }) {
      commit('SET_LOADING', true);
      try {
        await axios.delete(`/api/projects/${projectId}/files/${fileId}`);
        if (state.currentFile && state.currentFile.id === fileId) {
          commit('SET_CURRENT_FILE', null);
        }
        await dispatch('fetchProject', projectId);
      } finally {
        commit('SET_LOADING', false);
      }
    },
    async saveTranslation({ commit, state, dispatch }, { projectId, fileId }) {
      commit('SET_LOADING', true);
      try {
        const response = await axios.put(`/api/projects/${projectId}/files/${fileId}`, {
          translatedSegments: state.translatedSegments
        });
        await dispatch('fetchProject', projectId);
        return response.data;
      } finally {
        commit('SET_LOADING', false);
      }
    },
    async downloadTranslatedFile({ commit }, { projectId, fileId }) {
      commit('SET_LOADING', true);
      try {
        const response = await axios.get(`/api/projects/${projectId}/files/${fileId}/download`, {
          responseType: 'blob'
        });
        
        // 从响应头中获取文件名
        const contentDisposition = response.headers['content-disposition'];
        let filename = 'translated.txt';
        if (contentDisposition) {
          const filenameMatch = contentDisposition.match(/filename="(.+)"/);
          if (filenameMatch.length === 2) {
            filename = filenameMatch[1];
          }
        }
        
        // 创建下载链接
        const url = window.URL.createObjectURL(new Blob([response.data]));
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', filename);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        return true;
      } finally {
        commit('SET_LOADING', false);
      }
    },
    updateTranslatedSegment({ commit }, { index, text }) {
      commit('UPDATE_TRANSLATED_SEGMENT', { index, text });
    }
  },
  getters: {
    projectsCount: state => state.projects.length,
    getProjectById: state => id => state.projects.find(project => project.id === id),
    getCompletionRate: state => {
      if (!state.originalSegments.length) return 0;
      const completed = state.translatedSegments.filter(s => s.trim() !== '').length;
      return Math.round((completed / state.originalSegments.length) * 100);
    },
    isTranslationComplete: state => {
      if (!state.originalSegments.length) return false;
      return state.translatedSegments.every(s => s.trim() !== '');
    }
  }
})

================
File: src/views/Home.vue
================
<template>
  <div class="home">
    <!-- More compact jumbotron with better spacing -->
    <b-jumbotron 
      class="home-jumbotron py-4 mb-4"
      header="翻译工作平台" 
      lead="高效管理您的翻译项目"
    >
      <p>这是一个简单而强大的翻译管理工具，帮助您组织和跟踪多个翻译项目的进度。</p>
      <b-button variant="primary" size="lg" to="/projects" class="mt-2">开始使用</b-button>
    </b-jumbotron>

    <!-- Feature cards section with improved layout -->
    <h2 class="text-center mb-4">主要功能</h2>
    <b-row>
      <b-col lg="4" md="4" sm="12" class="mb-4">
        <b-card 
          class="text-center h-100 feature-card" 
          bg-variant="light" 
          border-variant="light"
        >
          <div class="icon-wrapper mb-3">
            <b-icon icon="folder-plus" font-scale="3"></b-icon>
          </div>
          <h3 class="card-title h4">创建项目</h3>
          <b-card-text>
            创建和管理不同的翻译项目，每个项目可以包含多个文件。
          </b-card-text>
        </b-card>
      </b-col>
      
      <b-col lg="4" md="4" sm="12" class="mb-4">
        <b-card 
          class="text-center h-100 feature-card" 
          bg-variant="light" 
          border-variant="light"
        >
          <div class="icon-wrapper mb-3">
            <b-icon icon="cloud-upload" font-scale="3"></b-icon>
          </div>
          <h3 class="card-title h4">上传文件</h3>
          <b-card-text>
            上传待翻译的文本文件，系统会自动分段以便翻译。
          </b-card-text>
        </b-card>
      </b-col>
      
      <b-col lg="4" md="4" sm="12" class="mb-4">
        <b-card 
          class="text-center h-100 feature-card" 
          bg-variant="light" 
          border-variant="light"
        >
          <div class="icon-wrapper mb-3">
            <b-icon icon="bar-chart-line" font-scale="3"></b-icon>
          </div>
          <h3 class="card-title h4">翻译进度</h3>
          <b-card-text>
            跟踪每个项目和文件的翻译进度，方便管理工作任务。
          </b-card-text>
        </b-card>
      </b-col>
    </b-row>

    <!-- Added workflow section for better user guidance -->
    <b-card class="mt-5 mb-3 workflow-card">
      <h2 class="text-center mb-4">如何使用</h2>
      <b-card-text>
        <b-row align-v="center" class="workflow-step">
          <b-col md="2" class="text-center">
            <div class="step-number">1</div>
          </b-col>
          <b-col md="10">
            <h4>创建翻译项目</h4>
            <p>为您的翻译工作创建一个新项目，添加描述以便于管理。</p>
          </b-col>
        </b-row>
        
        <b-row align-v="center" class="workflow-step">
          <b-col md="2" class="text-center">
            <div class="step-number">2</div>
          </b-col>
          <b-col md="10">
            <h4>上传文件</h4>
            <p>上传需要翻译的文本文件，系统会自动将内容分段。</p>
          </b-col>
        </b-row>
        
        <b-row align-v="center" class="workflow-step">
          <b-col md="2" class="text-center">
            <div class="step-number">3</div>
          </b-col>
          <b-col md="10">
            <h4>翻译内容</h4>
            <p>逐段翻译文件内容，随时保存进度。</p>
          </b-col>
        </b-row>
        
        <b-row align-v="center" class="workflow-step">
          <b-col md="2" class="text-center">
            <div class="step-number">4</div>
          </b-col>
          <b-col md="10">
            <h4>下载翻译结果</h4>
            <p>完成翻译后，下载已翻译的文件。</p>
          </b-col>
        </b-row>
      </b-card-text>
      
      <div class="text-center mt-4">
        <b-button variant="primary" size="lg" to="/projects">立即开始</b-button>
      </div>
    </b-card>
  </div>
</template>

<script>
export default {
  name: 'Home'
}
</script>

<style scoped>
.home-jumbotron {
  background-color: #f8f9fa;
  border-radius: 0.5rem;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
}

.icon-wrapper {
  height: 70px;
  width: 70px;
  margin: 0 auto;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: rgba(13, 110, 253, 0.1);
  border-radius: 50%;
  color: #0d6efd;
}

.feature-card {
  transition: all 0.3s ease;
  border: none;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
}

.feature-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
}

.workflow-card {
  border: none;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  background-color: #f8f9fa;
}

.workflow-step {
  margin-bottom: 2rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #e9ecef;
}

.workflow-step:last-child {
  margin-bottom: 0;
  padding-bottom: 0;
  border-bottom: none;
}

.step-number {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 50px;
  height: 50px;
  margin: 0 auto;
  background-color: #0d6efd;
  color: white;
  font-size: 1.5rem;
  font-weight: bold;
  border-radius: 50%;
}

@media (max-width: 768px) {
  .workflow-step {
    text-align: center;
  }
  
  .step-number {
    margin-bottom: 1rem;
  }
}
</style>

================
File: src/views/ProjectDetail.vue
================
<template>
  <div class="project-detail">
    <b-overlay :show="$store.state.loading" rounded>
      <div v-if="project">
        <b-breadcrumb>
          <b-breadcrumb-item to="/projects">项目列表</b-breadcrumb-item>
          <b-breadcrumb-item active>{{ project.name }}</b-breadcrumb-item>
        </b-breadcrumb>

        <b-row class="mb-4">
          <b-col md="8">
            <h1>{{ project.name }}</h1>
            <p class="text-muted">
              <small>创建于: {{ formatDate(project.creationDate) }} | 最后更新: {{ formatDate(project.lastModified) }}</small>
            </p>
            <p>{{ project.description || '无描述' }}</p>
          </b-col>
          <b-col md="4">
            <b-card>
              <h4>项目概况</h4>
              <b-progress 
                :value="project.completionRate" 
                :max="100" 
                class="mb-2"
                show-value
              ></b-progress>
              <div class="d-flex justify-content-between">
                <div>文件数:</div>
                <div><strong>{{ project.files.length }}</strong></div>
              </div>
            </b-card>
          </b-col>
        </b-row>
        
        <b-card class="mb-4">
          <h3>上传文件</h3>
          <b-form @submit.prevent="uploadFile" class="mb-0">
            <b-form-file
              v-model="fileToUpload"
              accept=".txt"
              placeholder="选择或拖放文件到这里..."
              drop-placeholder="拖放文件到这里..."
              required
            ></b-form-file>
            <div class="mt-3">
              <b-button type="submit" variant="primary" :disabled="!fileToUpload">上传文件</b-button>
            </div>
          </b-form>
        </b-card>

        <h3>文件列表</h3>
        <div v-if="!project.files.length" class="text-center py-4">
          <b-alert show variant="info">该项目暂无文件，请上传新文件</b-alert>
        </div>
        
        <b-table 
          v-else
          :items="project.files"
          :fields="fields"
          hover
          responsive
          class="mb-0"
          small
        >
          <template #cell(fileName)="data">
            {{ data.item.fileName }}
          </template>
          
          <template #cell(uploadDate)="data">
            {{ formatDate(data.item.uploadDate) }}
          </template>
          
          <template #cell(completionRate)="data">
            <b-progress 
              :value="data.item.completionRate" 
              :max="100" 
              show-value
              class="mb-0"
            ></b-progress>
          </template>
          
          <template #cell(actions)="data">
            <b-button 
              variant="primary" 
              size="sm" 
              class="mr-2" 
              @click="goToTranslation(data.item.id)"
            >
              翻译
            </b-button>
            <b-button 
              variant="danger" 
              size="sm" 
              @click="confirmDeleteFile(data.item.id, data.item.fileName)"
            >
              删除
            </b-button>
          </template>
        </b-table>
      </div>
      <div v-else>
        <b-alert show variant="danger">项目不存在或加载失败</b-alert>
        <b-button to="/projects" variant="primary">返回项目列表</b-button>
      </div>
    </b-overlay>
    
    <!-- 确认删除对话框 -->
    <b-modal 
      id="delete-file-modal" 
      title="确认删除" 
      ok-title="删除" 
      cancel-title="取消"
      @ok="deleteFile"
    >
      <p>确定要删除文件"{{ fileToDelete.name }}"吗？此操作无法撤销。</p>
    </b-modal>
  </div>
</template>

<script>
export default {
  name: 'ProjectDetail',
  props: {
    id: {
      type: String,
      required: true
    }
  },
  data() {
    return {
      fileToUpload: null,
      fileToDelete: {
        id: null,
        name: ''
      },
      fields: [
        { key: 'fileName', label: '文件名' },
        { key: 'uploadDate', label: '上传时间' },
        { key: 'completionRate', label: '完成率' },
        { key: 'actions', label: '操作' }
      ]
    }
  },
  computed: {
    project() {
      return this.$store.state.currentProject;
    }
  },
  created() {
    this.fetchProject();
  },
  methods: {
    async fetchProject() {
      try {
        await this.$store.dispatch('fetchProject', this.id);
        
        if (!this.project) {
          this.$emit('show-error', '找不到该项目');
          this.$router.push('/projects');
        }
      } catch (error) {
        this.$emit('show-error', error.response?.data?.error || '获取项目详情失败');
        this.$router.push('/projects');
      }
    },
    async uploadFile() {
      if (!this.fileToUpload) return;
      
      try {
        const formData = new FormData();
        formData.append('file', this.fileToUpload);
        
        await this.$store.dispatch('uploadFile', {
          projectId: this.id,
          formData
        });
        
        this.$emit('show-success', '文件上传成功');
        this.fileToUpload = null;
      } catch (error) {
        this.$emit('show-error', error.response?.data?.error || '上传文件失败');
      }
    },
    goToTranslation(fileId) {
      this.$router.push(`/translation/${this.id}/${fileId}`);
    },
    confirmDeleteFile(id, name) {
      this.fileToDelete = { id, name };
      this.$bvModal.show('delete-file-modal');
    },
    async deleteFile() {
      try {
        await this.$store.dispatch('deleteFile', {
          projectId: this.id,
          fileId: this.fileToDelete.id
        });
        this.$emit('show-success', '文件删除成功');
      } catch (error) {
        this.$emit('show-error', error.response?.data?.error || '删除文件失败');
      }
    },
    formatDate(dateString) {
      return new Date(dateString).toLocaleString();
    }
  }
}
</script>

================
File: src/views/Projects.vue
================
<template>
  <div class="projects">
    <h1>项目管理</h1>
    
    <b-overlay :show="$store.state.loading" rounded>
      <b-card title="创建新项目" class="mb-4">
        <b-form @submit.prevent="createProject">
          <b-row>
            <b-col md="6">
              <b-form-group label="项目名称" label-for="project-name">
                <b-form-input
                  id="project-name"
                  v-model="newProject.name"
                  required
                  placeholder="输入项目名称"
                ></b-form-input>
              </b-form-group>
            </b-col>
            <b-col md="6">
              <b-form-group label="项目描述" label-for="project-description">
                <b-form-textarea
                  id="project-description"
                  v-model="newProject.description"
                  placeholder="项目描述（可选）"
                  rows="3"
                ></b-form-textarea>
              </b-form-group>
            </b-col>
          </b-row>
          <b-button type="submit" variant="primary">创建项目</b-button>
        </b-form>
      </b-card>

      <h2>项目列表</h2>
      <div v-if="!projects.length" class="text-center py-4">
        <b-alert show variant="info">暂无项目，请创建新项目</b-alert>
      </div>
      
      <b-card v-for="project in projects" :key="project.id" class="mb-3 project-card">
        <b-row>
          <b-col md="9">
            <h3>{{ project.name }}</h3>
            <p class="text-muted">
              <small>创建于: {{ formatDate(project.creationDate) }} | 最后更新: {{ formatDate(project.lastModified) }}</small>
            </p>
            <p>{{ project.description || '无描述' }}</p>
            <div class="d-flex align-items-center">
              <b-progress
                :value="project.completionRate"
                :max="100"
                class="flex-grow-1 mr-2"
                show-value
              ></b-progress>
              <span>文件数: {{ project.files.length }}</span>
            </div>
          </b-col>
          <b-col md="3" class="d-flex flex-column justify-content-center align-items-end">
            <b-button 
              variant="primary" 
              class="mb-2" 
              @click="viewProject(project.id)"
            >
              查看
            </b-button>
            <b-button 
              variant="danger" 
              @click="confirmDeleteProject(project.id, project.name)"
            >
              删除
            </b-button>
          </b-col>
        </b-row>
      </b-card>
    </b-overlay>
    
    <b-modal 
      id="delete-project-modal" 
      title="确认删除" 
      ok-title="删除" 
      cancel-title="取消"
      @ok="deleteProject"
    >
      <p>确定要删除项目"{{ projectToDelete.name }}"吗？项目中的所有文件也将被删除，此操作无法撤销。</p>
    </b-modal>
  </div>
</template>

<script>
import { mapState } from 'vuex'

export default {
  name: 'Projects',
  data() {
    return {
      newProject: {
        name: '',
        description: ''
      },
      projectToDelete: {
        id: null,
        name: ''
      }
    }
  },
  computed: {
    ...mapState({
      projects: state => state.projects
    })
  },
  created() {
    this.fetchProjects();
  },
  methods: {
    async fetchProjects() {
      try {
        await this.$store.dispatch('fetchProjects');
      } catch (error) {
        this.$emit('show-error', error.response?.data?.error || '获取项目列表失败');
      }
    },
    async createProject() {
      try {
        const result = await this.$store.dispatch('createProject', {
          name: this.newProject.name,
          description: this.newProject.description
        });
        this.$emit('show-success', '项目创建成功');
        
        this.newProject.name = '';
        this.newProject.description = '';
        
        this.$router.push(`/projects/${result.id}`);
      } catch (error) {
        this.$emit('show-error', error.response?.data?.error || '创建项目失败');
      }
    },
    viewProject(projectId) {
      this.$router.push(`/projects/${projectId}`);
    },
    confirmDeleteProject(id, name) {
      this.projectToDelete = { id, name };
      this.$bvModal.show('delete-project-modal');
    },
    async deleteProject() {
      try {
        await this.$store.dispatch('deleteProject', this.projectToDelete.id);
        this.$emit('show-success', '项目删除成功');
      } catch (error) {
        this.$emit('show-error', error.response?.data?.error || '删除项目失败');
      }
    },
    formatDate(dateString) {
      return new Date(dateString).toLocaleString();
    }
  }
}
</script>

<style scoped>
.project-card {
  transition: all 0.3s ease;
}
.project-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 20px rgba(0,0,0,0.1);
}
</style>

================
File: src/views/Translation.vue
================
<template>
  <div class="translation">
    <b-overlay :show="$store.state.loading" rounded>
      <div v-if="currentFile && currentProject">
        <b-breadcrumb>
          <b-breadcrumb-item to="/projects">项目列表</b-breadcrumb-item>
          <b-breadcrumb-item :to="`/projects/${projectId}`">{{ currentProject.name }}</b-breadcrumb-item>
          <b-breadcrumb-item active>{{ currentFile.fileName }}</b-breadcrumb-item>
        </b-breadcrumb>
        
        <b-row class="mb-4">
          <b-col md="8">
            <h1>翻译文件：{{ currentFile.fileName }}</h1>
            <p>上传于: {{ formatDate(currentFile.uploadDate) }}</p>
          </b-col>
          <b-col md="4">
            <b-card>
              <b-row>
                <b-col cols="4" class="text-center">
                  <h5>总段落数</h5>
                  <div class="stat-number">{{ originalSegments.length }}</div>
                </b-col>
                <b-col cols="4" class="text-center">
                  <h5>已完成</h5>
                  <div class="stat-number">{{ completedSegmentsCount }}</div>
                </b-col>
                <b-col cols="4" class="text-center">
                  <h5>完成率</h5>
                  <div class="stat-number">{{ completionRate }}%</div>
                </b-col>
              </b-row>
              <b-progress 
                :value="completionRate" 
                :max="100" 
                class="mt-3"
                show-value
              ></b-progress>
            </b-card>
          </b-col>
        </b-row>
        
        <b-card class="mb-4">
          <b-row>
            <b-col sm="6">
              <b-form-group label="搜索内容">
                <b-form-input 
                  v-model="searchText" 
                  placeholder="搜索原文或译文..." 
                  @input="filterItems"
                ></b-form-input>
              </b-form-group>
            </b-col>
            <b-col sm="6">
              <b-form-group label="状态过滤">
                <b-form-select 
                  v-model="statusFilter" 
                  :options="statusOptions" 
                  @change="filterItems"
                ></b-form-select>
              </b-form-group>
            </b-col>
          </b-row>
          
          <div class="d-flex justify-content-between align-items-center mb-3">
            <div>
              <b-button variant="primary" @click="saveTranslation">保存翻译进度</b-button>
              <b-button 
                variant="success" 
                class="ml-2" 
                :disabled="!isTranslationComplete" 
                @click="downloadTranslatedFile"
              >
                下载翻译文件
              </b-button>
            </div>
            <div>
              <span v-if="filteredItems.length !== originalSegments.length">
                显示 {{ filteredItems.length }} / {{ originalSegments.length }} 个段落
              </span>
            </div>
          </div>
        </b-card>
        
        <div v-for="index in filteredItems" :key="index" class="translation-item mb-4" :class="{ 'completed': isSegmentCompleted(index) }">
          <b-card>
            <div class="original-text">{{ originalSegments[index] }}</div>
            <b-form-group label="翻译:">
              <b-form-textarea
                v-model="translatedSegments[index]"
                rows="3"
                max-rows="8"
                placeholder="在此输入翻译..."
                @input="updateTranslation(index, $event)"
              ></b-form-textarea>
            </b-form-group>
            <div class="d-flex justify-content-between">
              <span :class="isSegmentCompleted(index) ? 'status-completed' : 'status-pending'">
                {{ isSegmentCompleted(index) ? '已完成' : '待翻译' }}
              </span>
              <span>段落 {{ index + 1 }} / {{ originalSegments.length }}</span>
            </div>
          </b-card>
        </div>
        
        <div v-if="filteredItems.length === 0" class="text-center py-4">
          <b-alert show variant="info">没有匹配的段落</b-alert>
        </div>
        
        <div class="d-flex justify-content-center mt-4 mb-4">
          <b-button variant="primary" @click="saveTranslation">保存翻译进度</b-button>
        </div>
      </div>
      <div v-else>
        <b-alert show variant="danger">文件不存在或加载失败</b-alert>
        <b-button :to="`/projects/${projectId}`" variant="primary">返回项目</b-button>
      </div>
    </b-overlay>
  </div>
</template>

<script>
import { mapState, mapGetters } from 'vuex'

export default {
  name: 'Translation',
  props: {
    projectId: {
      type: String,
      required: true
    },
    fileId: {
      type: String,
      required: true
    }
  },
  data() {
    return {
      searchText: '',
      statusFilter: 'all',
      statusOptions: [
        { value: 'all', text: '所有状态' },
        { value: 'completed', text: '已完成' },
        { value: 'pending', text: '待翻译' }
      ],
      filteredItems: []
    }
  },
  computed: {
    ...mapState({
      currentProject: state => state.currentProject,
      currentFile: state => state.currentFile,
      originalSegments: state => state.originalSegments,
      translatedSegments: state => state.translatedSegments
    }),
    ...mapGetters([
      'getCompletionRate',
      'isTranslationComplete'
    ]),
    completionRate() {
      return this.getCompletionRate;
    },
    completedSegmentsCount() {
      return this.translatedSegments.filter(s => s.trim() !== '').length;
    }
  },
  created() {
    this.fetchProjectAndFile();
  },
  methods: {
    async fetchProjectAndFile() {
      try {
        await this.$store.dispatch('fetchProject', this.projectId);
        await this.$store.dispatch('fetchFile', {
          projectId: this.projectId,
          fileId: this.fileId
        });
        this.initFilteredItems();
      } catch (error) {
        this.$emit('show-error', error.response?.data?.error || '获取文件内容失败');
        this.$router.push(`/projects/${this.projectId}`);
      }
    },
    initFilteredItems() {
      this.filteredItems = Array.from({ length: this.originalSegments.length }, (_, i) => i);
      this.filterItems();
    },
    filterItems() {
      const searchText = this.searchText.toLowerCase();
      const statusFilter = this.statusFilter;
      
      this.filteredItems = Array.from({ length: this.originalSegments.length }, (_, i) => i).filter(index => {
        const originalText = this.originalSegments[index].toLowerCase();
        const translationText = this.translatedSegments[index].toLowerCase();
        const isCompleted = this.isSegmentCompleted(index);
        
        const matchesSearch = searchText === '' || 
                             originalText.includes(searchText) || 
                             translationText.includes(searchText);
        
        const matchesStatus = statusFilter === 'all' || 
                             (statusFilter === 'completed' && isCompleted) || 
                             (statusFilter === 'pending' && !isCompleted);
        
        return matchesSearch && matchesStatus;
      });
    },
    updateTranslation(index, text) {
      this.$store.dispatch('updateTranslatedSegment', { index, text });
    },
    isSegmentCompleted(index) {
      return this.translatedSegments[index]?.trim() !== '';
    },
    async saveTranslation() {
      try {
        await this.$store.dispatch('saveTranslation', {
          projectId: this.projectId,
          fileId: this.fileId
        });
        this.$emit('show-success', '翻译进度已保存');
      } catch (error) {
        this.$emit('show-error', error.response?.data?.error || '保存翻译进度失败');
      }
    },
    async downloadTranslatedFile() {
      try {
        await this.$store.dispatch('downloadTranslatedFile', {
          projectId: this.projectId,
          fileId: this.fileId
        });
        this.$emit('show-success', '文件下载成功');
      } catch (error) {
        this.$emit('show-error', error.response?.data?.error || '下载文件失败');
      }
    },
    formatDate(dateString) {
      return new Date(dateString).toLocaleString();
    }
  }
}
</script>

<style scoped>
.stat-number {
  font-size: 1.5rem;
  font-weight: bold;
}

.original-text {
  margin-bottom: 10px;
  padding: 15px;
  background-color: #f8f9fa;
  border-radius: 5px;
  font-size: 1.1rem;
}

.translation-item {
  transition: all 0.3s ease;
}

.translation-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 20px rgba(0,0,0,0.1);
}

.translation-item.completed {
  border-left: 5px solid #28a745;
}
</style>

================
File: src/App.vue
================
<template>
  <div id="app">
    <b-navbar toggleable="lg" type="dark" variant="primary">
      <b-navbar-brand href="#">翻译工作平台</b-navbar-brand>

      <b-navbar-toggle target="nav-collapse"></b-navbar-toggle>

      <b-collapse id="nav-collapse" is-nav>
        <b-navbar-nav>
          <b-nav-item to="/" exact>首页</b-nav-item>
          <b-nav-item to="/projects">项目管理</b-nav-item>
        </b-navbar-nav>
      </b-collapse>
    </b-navbar>

    <b-container class="py-3">
      <b-alert
        :show="!!errorMessage"
        dismissible
        variant="danger"
        @dismissed="errorMessage = ''"
      >
        {{ errorMessage }}
      </b-alert>

      <b-alert
        :show="!!successMessage"
        dismissible
        variant="success"
        @dismissed="successMessage = ''"
      >
        {{ successMessage }}
      </b-alert>

      <router-view 
        @show-error="showError" 
        @show-success="showSuccess"
      />
    </b-container>
  </div>
</template>

<script>
export default {
  name: 'App',
  data() {
    return {
      errorMessage: '',
      successMessage: ''
    }
  },
  methods: {
    showError(message) {
      this.errorMessage = message;
      setTimeout(() => {
        this.errorMessage = '';
      }, 5000);
    },
    showSuccess(message) {
      this.successMessage = message;
      setTimeout(() => {
        this.successMessage = '';
      }, 3000);
    }
  }
}
</script>

<style>
html, body {
  height: 100%;
}

#app {
  font-family: 'PingFang SC', 'Microsoft YaHei', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  color: #333;
  min-height: 100%;
  background-color: #f5f7fa;
}

.navbar {
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  margin-bottom: 1.5rem;
}

.container {
  padding-top: 1.5rem;
  padding-bottom: 2rem;
}

.loading-overlay {
  display: flex;
  justify-content: center;
  align-items: center;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(255, 255, 255, 0.7);
  z-index: 1000;
}

.card {
  margin-bottom: 20px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  border: none;
  border-radius: 0.5rem;
  overflow: hidden;
}

.card-header {
  background-color: rgba(0, 0, 0, 0.03);
  border-bottom: 1px solid rgba(0, 0, 0, 0.125);
  padding: 0.75rem 1.25rem;
}

.card-body {
  padding: 1.5rem;
}

.btn {
  font-weight: 500;
  padding: 0.5rem 1rem;
  border-radius: 0.25rem;
  transition: all 0.2s;
}

.btn-primary {
  background-color: #0d6efd;
  border-color: #0d6efd;
}

.btn-primary:hover {
  background-color: #0b5ed7;
  border-color: #0a58ca;
}

.alert {
  border: none;
  border-radius: 0.5rem;
  margin-bottom: 1.5rem;
}

.status-completed {
  color: #28a745;
}

.status-pending {
  color: #ffc107;
}

.translation-item {
  border: 1px solid #dee2e6;
  border-radius: 0.25rem;
  padding: 15px;
  margin-bottom: 15px;
  transition: all 0.3s ease;
}

.translation-item:hover {
  transform: translateY(-3px);
  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
}

.translation-item.completed {
  border-left: 5px solid #28a745;
}

.original-text {
  margin-bottom: 10px;
  padding: 15px;
  background-color: #f8f9fa;
  border-radius: 5px;
}

.breadcrumb {
  background-color: transparent;
  padding: 0.5rem 0;
  margin-bottom: 1.5rem;
}

.jumbotron {
  background-color: #f8f9fa;
  border-radius: 0.5rem;
  padding: 2rem;
  margin-bottom: 2rem;
}

/* Custom animations */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.fade-in {
  animation: fadeIn 0.5s ease-in;
}
</style>

================
File: src/main.js
================
import Vue from 'vue'
import App from './App.vue'
import router from './router'
import store from './store'
import { BootstrapVue, IconsPlugin } from 'bootstrap-vue'

// 导入Bootstrap样式
import 'bootstrap/dist/css/bootstrap.css'
import 'bootstrap-vue/dist/bootstrap-vue.css'

// 安装 BootstrapVue
Vue.use(BootstrapVue)
Vue.use(IconsPlugin)

Vue.config.productionTip = false

new Vue({
  router,
  store,
  render: h => h(App)
}).$mount('#app')



================================================================
End of Codebase
================================================================
